
Lab3 motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08004310  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004310  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7dc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0002d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001575f  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5ab  00000000  00000000  0004629f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1cb  00000000  00000000  0005384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dda15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  000dda68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042bc 	.word	0x080042bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080042bc 	.word	0x080042bc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc18 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f822 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9e4 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f9c2 	bl	8000874 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f996 	bl	8000820 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004f4:	f000 f882 	bl	80005fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 f922 	bl	8000740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x44>)
 80004fe:	f001 ff83 	bl	8002408 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, InputCaptureBuffer, IC_BUFFER_SIZE);
 8000502:	230c      	movs	r3, #12
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <main+0x48>)
 8000506:	2100      	movs	r1, #0
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x44>)
 800050a:	f002 f93b 	bl	8002784 <HAL_TIM_IC_Start_DMA>


  HAL_TIM_Base_Start(&htim1);
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <main+0x4c>)
 8000510:	f001 ff7a 	bl	8002408 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x4c>)
 8000518:	f002 f82a 	bl	8002570 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x40>
 800051e:	bf00      	nop
 8000520:	20000070 	.word	0x20000070
 8000524:	2000015c 	.word	0x2000015c
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 feb6 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <SystemClock_Config+0xc8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <SystemClock_Config+0xcc>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a0:	2354      	movs	r3, #84	; 0x54
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fa41 	bl	8001a38 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f9e8 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2102      	movs	r1, #2
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fca3 	bl	8001f28 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e8:	f000 f9d2 	bl	8000990 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2220      	movs	r2, #32
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fe39 	bl	80042ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <MX_TIM1_Init+0x13c>)
 800063c:	4a3f      	ldr	r2, [pc, #252]	; (800073c <MX_TIM1_Init+0x140>)
 800063e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000642:	2253      	movs	r2, #83	; 0x53
 8000644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800064c:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <MX_TIM1_Init+0x13c>)
 800064e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000652:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <MX_TIM1_Init+0x13c>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000666:	4834      	ldr	r0, [pc, #208]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000668:	f001 fe7e 	bl	8002368 <HAL_TIM_Base_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000672:	f000 f98d 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800067c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000680:	4619      	mov	r1, r3
 8000682:	482d      	ldr	r0, [pc, #180]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000684:	f002 fc80 	bl	8002f88 <HAL_TIM_ConfigClockSource>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800068e:	f000 f97f 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000692:	4829      	ldr	r0, [pc, #164]	; (8000738 <MX_TIM1_Init+0x13c>)
 8000694:	f001 ff12 	bl	80024bc <HAL_TIM_PWM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 f977 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ae:	4619      	mov	r1, r3
 80006b0:	4821      	ldr	r0, [pc, #132]	; (8000738 <MX_TIM1_Init+0x13c>)
 80006b2:	f003 fa41 	bl	8003b38 <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f968 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80006c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <MX_TIM1_Init+0x13c>)
 80006e8:	f002 fb8c 	bl	8002e04 <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80006f2:	f000 f94d 	bl	8000990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM1_Init+0x13c>)
 800071a:	f003 fa7b 	bl	8003c14 <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000724:	f000 f934 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM1_Init+0x13c>)
 800072a:	f000 f9f7 	bl	8000b1c <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3758      	adds	r7, #88	; 0x58
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	40010000 	.word	0x40010000

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_TIM2_Init+0xdc>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_TIM2_Init+0xdc>)
 8000774:	2253      	movs	r2, #83	; 0x53
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_TIM2_Init+0xdc>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_TIM2_Init+0xdc>)
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_TIM2_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_TIM2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <MX_TIM2_Init+0xdc>)
 8000794:	f001 fde8 	bl	8002368 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800079e:	f000 f8f7 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4619      	mov	r1, r3
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_TIM2_Init+0xdc>)
 80007b0:	f002 fbea 	bl	8002f88 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ba:	f000 f8e9 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <MX_TIM2_Init+0xdc>)
 80007c0:	f001 ff86 	bl	80026d0 <HAL_TIM_IC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ca:	f000 f8e1 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <MX_TIM2_Init+0xdc>)
 80007de:	f003 f9ab 	bl	8003b38 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 f8d2 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f0:	2301      	movs	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_TIM2_Init+0xdc>)
 8000804:	f002 fa62 	bl	8002ccc <HAL_TIM_IC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800080e:	f000 f8bf 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000070 	.word	0x20000070

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f003 fa42 	bl	8003ce0 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f895 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000118 	.word	0x20000118
 8000870:	40004400 	.word	0x40004400

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2010      	movs	r0, #16
 800089c:	f000 fb87 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008a0:	2010      	movs	r0, #16
 80008a2:	f000 fba0 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a25      	ldr	r2, [pc, #148]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_GPIO_Init+0xd4>)
 8000940:	f001 f860 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_GPIO_Init+0xd8>)
 800095c:	f000 fece 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_GPIO_Init+0xd4>)
 8000978:	f000 fec0 	bl	80016fc <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009da:	2007      	movs	r0, #7
 80009dc:	f000 fadc 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a3f      	ldr	r2, [pc, #252]	; (8000b08 <HAL_TIM_Base_MspInit+0x11c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10e      	bne.n	8000a2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2a:	e069      	b.n	8000b00 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d164      	bne.n	8000b00 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_TIM_Base_MspInit+0x120>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <HAL_TIM_Base_MspInit+0x124>)
 8000a8a:	f000 fe37 	bl	80016fc <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_TIM_Base_MspInit+0x12c>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000a96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000ad6:	f000 faa1 	bl	800101c <HAL_DMA_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8000ae0:	f7ff ff56 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x128>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	201c      	movs	r0, #28
 8000af6:	f000 fa5a 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000afa:	201c      	movs	r0, #28
 8000afc:	f000 fa73 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200000b8 	.word	0x200000b8
 8000b18:	40026088 	.word	0x40026088

08000b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_TIM_MspPostInit+0x68>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d11e      	bne.n	8000b7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_TIM_MspPostInit+0x70>)
 8000b78:	f000 fdc0 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40010000 	.word	0x40010000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f000 fd79 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8a4 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <DMA1_Stream5_IRQHandler+0x10>)
 8000c7a:	f000 fad5 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000b8 	.word	0x200000b8

08000c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM2_IRQHandler+0x10>)
 8000c8e:	f001 ff15 	bl	8002abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000070 	.word	0x20000070

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f003 fab9 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fbf3 	bl	80004dc <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	20000190 	.word	0x20000190

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f92b 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe28 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f943 	bl	8001002 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f90b 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	2000018c 	.word	0x2000018c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000018c 	.word	0x2000018c

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff feda 	bl	8000de0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e099      	b.n	800116c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001058:	e00f      	b.n	800107a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105a:	f7ff fec1 	bl	8000de0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b05      	cmp	r3, #5
 8001066:	d908      	bls.n	800107a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2220      	movs	r2, #32
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e078      	b.n	800116c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e8      	bne.n	800105a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_DMA_Init+0x158>)
 8001094:	4013      	ands	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d107      	bne.n	80010e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4313      	orrs	r3, r2
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f023 0307 	bic.w	r3, r3, #7
 80010fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4313      	orrs	r3, r2
 8001104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	2b04      	cmp	r3, #4
 800110c:	d117      	bne.n	800113e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fa6f 	bl	8001604 <DMA_CheckFifoParam>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2240      	movs	r2, #64	; 0x40
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800113a:	2301      	movs	r3, #1
 800113c:	e016      	b.n	800116c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fa26 	bl	8001598 <DMA_CalcBaseAndBitshift>
 800114c:	4603      	mov	r3, r0
 800114e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f010803f 	.word	0xf010803f

08001178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_DMA_Start_IT+0x26>
 800119a:	2302      	movs	r3, #2
 800119c:	e040      	b.n	8001220 <HAL_DMA_Start_IT+0xa8>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d12f      	bne.n	8001212 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2202      	movs	r2, #2
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f9b8 	bl	800153c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	223f      	movs	r2, #63	; 0x3f
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0216 	orr.w	r2, r2, #22
 80011e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e005      	b.n	800121e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800121a:	2302      	movs	r3, #2
 800121c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001234:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <HAL_DMA_IRQHandler+0x248>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a8e      	ldr	r2, [pc, #568]	; (8001474 <HAL_DMA_IRQHandler+0x24c>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	2208      	movs	r2, #8
 8001254:	409a      	lsls	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01a      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2208      	movs	r2, #8
 8001282:	409a      	lsls	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2201      	movs	r2, #1
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	2201      	movs	r2, #1
 80012b8:	409a      	lsls	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2204      	movs	r2, #4
 80012d0:	409a      	lsls	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d012      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2204      	movs	r2, #4
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f043 0204 	orr.w	r2, r3, #4
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	2210      	movs	r2, #16
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d043      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d03c      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2210      	movs	r2, #16
 8001324:	409a      	lsls	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d018      	beq.n	800136a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d024      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
 8001356:	e01f      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01b      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
 8001368:	e016      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2220      	movs	r2, #32
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 808f 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8087 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2220      	movs	r2, #32
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d136      	bne.n	8001440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0216 	bic.w	r2, r2, #22
 80013e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <HAL_DMA_IRQHandler+0x1da>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	223f      	movs	r2, #63	; 0x3f
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001432:	2b00      	cmp	r3, #0
 8001434:	d07e      	beq.n	8001534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
        }
        return;
 800143e:	e079      	b.n	8001534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01d      	beq.n	800148a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	2b00      	cmp	r3, #0
 8001462:	d031      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
 800146c:	e02c      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000
 8001474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e01e      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d032      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2205      	movs	r2, #5
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d307      	bcc.n	8001510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x2cc>
 800150e:	e000      	b.n	8001512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
 8001532:	e000      	b.n	8001536 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001534:	bf00      	nop
    }
  }
}
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b40      	cmp	r3, #64	; 0x40
 8001568:	d108      	bne.n	800157c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800157a:	e007      	b.n	800158c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	60da      	str	r2, [r3, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3b10      	subs	r3, #16
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <DMA_CalcBaseAndBitshift+0x64>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <DMA_CalcBaseAndBitshift+0x68>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d909      	bls.n	80015da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	1d1a      	adds	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
 80015d8:	e007      	b.n	80015ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	aaaaaaab 	.word	0xaaaaaaab
 8001600:	080042ec 	.word	0x080042ec

08001604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11f      	bne.n	800165e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d856      	bhi.n	80016d2 <DMA_CheckFifoParam+0xce>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <DMA_CheckFifoParam+0x28>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800164f 	.word	0x0800164f
 8001634:	0800163d 	.word	0x0800163d
 8001638:	080016d3 	.word	0x080016d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d046      	beq.n	80016d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800164c:	e043      	b.n	80016d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001656:	d140      	bne.n	80016da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e03d      	b.n	80016da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001666:	d121      	bne.n	80016ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d837      	bhi.n	80016de <DMA_CheckFifoParam+0xda>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <DMA_CheckFifoParam+0x70>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	0800168b 	.word	0x0800168b
 800167c:	08001685 	.word	0x08001685
 8001680:	0800169d 	.word	0x0800169d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      break;
 8001688:	e030      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d025      	beq.n	80016e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169a:	e022      	b.n	80016e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016a4:	d11f      	bne.n	80016e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016aa:	e01c      	b.n	80016e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d903      	bls.n	80016ba <DMA_CheckFifoParam+0xb6>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d003      	beq.n	80016c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016b8:	e018      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
      break;
 80016be:	e015      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e00b      	b.n	80016ea <DMA_CheckFifoParam+0xe6>
      break;
 80016d2:	bf00      	nop
 80016d4:	e00a      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016d6:	bf00      	nop
 80016d8:	e008      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
 80016dc:	e006      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016de:	bf00      	nop
 80016e0:	e004      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016e2:	bf00      	nop
 80016e4:	e002      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;   
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
    }
  } 
  
  return status; 
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e159      	b.n	80019cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8148 	bne.w	80019c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a2 	beq.w	80019c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a56      	ldr	r2, [pc, #344]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x2ec>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x202>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2f4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x1fe>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_GPIO_Init+0x2f8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x1fa>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a46      	ldr	r2, [pc, #280]	; (80019f8 <HAL_GPIO_Init+0x2fc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x1f6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a45      	ldr	r2, [pc, #276]	; (80019fc <HAL_GPIO_Init+0x300>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x1f2>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018ee:	2307      	movs	r3, #7
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x204>
 80018fe:	2300      	movs	r3, #0
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x2ec>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_GPIO_Init+0x304>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <HAL_GPIO_Init+0x304>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x304>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_GPIO_Init+0x304>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x304>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001996:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x304>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c0:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	f67f aea2 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e267      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d075      	beq.n	8001b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d00c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b85      	ldr	r3, [pc, #532]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b82      	ldr	r3, [pc, #520]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b7e      	ldr	r3, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e242      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x74>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6f      	ldr	r2, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6c      	ldr	r2, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001ad0:	4b69      	ldr	r3, [pc, #420]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a68      	ldr	r2, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f976 	bl	8000de0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f972 	bl	8000de0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e207      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f962 	bl	8000de0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f95e 	bl	8000de0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1f3      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1c7      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4937      	ldr	r1, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f917 	bl	8000de0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f913 	bl	8000de0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1a8      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4925      	ldr	r1, [pc, #148]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x244>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f8f6 	bl	8000de0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f8f2 	bl	8000de0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e187      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f8d6 	bl	8000de0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff f8d2 	bl	8000de0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e167      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x200>
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_OscConfig+0x248>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f8bf 	bl	8000de0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff f8bb 	bl	8000de0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e150      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470000 	.word	0x42470000
 8001c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ea      	bne.n	8001c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8097 	beq.w	8001dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a7c      	ldr	r2, [pc, #496]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b77      	ldr	r3, [pc, #476]	; (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b74      	ldr	r3, [pc, #464]	; (8001eac <HAL_RCC_OscConfig+0x474>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a73      	ldr	r2, [pc, #460]	; (8001eac <HAL_RCC_OscConfig+0x474>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f87b 	bl	8000de0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7ff f877 	bl	8000de0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e10c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x474>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2ea>
 8001d14:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a63      	ldr	r2, [pc, #396]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x30c>
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x324>
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f83c 	bl	8000de0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f838 	bl	8000de0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0cb      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x334>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff f826 	bl	8000de0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f822 	bl	8000de0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b5      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a38      	ldr	r2, [pc, #224]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a1 	beq.w	8001f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d05c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d141      	bne.n	8001e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe fff6 	bl	8000de0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fff2 	bl	8000de0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e087      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	491b      	ldr	r1, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe ffcb 	bl	8000de0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe ffc7 	bl	8000de0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e05c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x416>
 8001e6c:	e054      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_OscConfig+0x478>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ffb4 	bl	8000de0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ffb0 	bl	8000de0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e045      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_OscConfig+0x470>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x444>
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e038      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d028      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d121      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cc      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e067      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4934      	ldr	r1, [pc, #208]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fee2 	bl	8000de0 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fede 	bl	8000de0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe42 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	080042d4 	.word	0x080042d4
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b094      	sub	sp, #80	; 0x50
 80020fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	2300      	movs	r3, #0
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d00d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 8002118:	2b08      	cmp	r3, #8
 800211a:	f200 80e1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 8002122:	2b04      	cmp	r3, #4
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x3a>
 8002126:	e0db      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800212c:	e0db      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b73      	ldr	r3, [pc, #460]	; (80022fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002132:	e0d8      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
 8002154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
 8002162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	6139      	str	r1, [r7, #16]
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002198:	4659      	mov	r1, fp
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4651      	mov	r1, sl
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4651      	mov	r1, sl
 80021a8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ac:	4659      	mov	r1, fp
 80021ae:	eb63 0901 	sbc.w	r9, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c6:	4690      	mov	r8, r2
 80021c8:	4699      	mov	r9, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb18 0303 	adds.w	r3, r8, r3
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb49 0303 	adc.w	r3, r9, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021e6:	4629      	mov	r1, r5
 80021e8:	024b      	lsls	r3, r1, #9
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f0:	4621      	mov	r1, r4
 80021f2:	024a      	lsls	r2, r1, #9
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002204:	f7fd ffe8 	bl	80001d8 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002210:	e058      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	4618      	mov	r0, r3
 800221c:	4611      	mov	r1, r2
 800221e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4641      	mov	r1, r8
 8002246:	ebb2 0a01 	subs.w	sl, r2, r1
 800224a:	4649      	mov	r1, r9
 800224c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800225c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002264:	ebb2 040a 	subs.w	r4, r2, sl
 8002268:	eb63 050b 	sbc.w	r5, r3, fp
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	464b      	mov	r3, r9
 8002288:	eb45 0303 	adc.w	r3, r5, r3
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	61fa      	str	r2, [r7, #28]
 80022b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b8:	f7fd ff8e 	bl	80001d8 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3750      	adds	r7, #80	; 0x50
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	080042e4 	.word	0x080042e4

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	080042e4 	.word	0x080042e4

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e041      	b.n	80023fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fb2c 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 ffdc 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d001      	beq.n	8002420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e03c      	b.n	800249a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_TIM_Base_Start+0xa0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d018      	beq.n	8002464 <HAL_TIM_Base_Start+0x5c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d013      	beq.n	8002464 <HAL_TIM_Base_Start+0x5c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_TIM_Base_Start+0xa4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00e      	beq.n	8002464 <HAL_TIM_Base_Start+0x5c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_TIM_Base_Start+0xa8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_TIM_Base_Start+0x5c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_TIM_Base_Start+0xac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_TIM_Base_Start+0x5c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_TIM_Base_Start+0xb0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d111      	bne.n	8002488 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b06      	cmp	r3, #6
 8002474:	d010      	beq.n	8002498 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	e007      	b.n	8002498 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40000c00 	.word	0x40000c00
 80024b8:	40014000 	.word	0x40014000

080024bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e041      	b.n	8002552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f839 	bl	800255a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 ff32 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_TIM_PWM_Start+0x24>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e022      	b.n	80025da <HAL_TIM_PWM_Start+0x6a>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b04      	cmp	r3, #4
 8002598:	d109      	bne.n	80025ae <HAL_TIM_PWM_Start+0x3e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e015      	b.n	80025da <HAL_TIM_PWM_Start+0x6a>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d109      	bne.n	80025c8 <HAL_TIM_PWM_Start+0x58>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e008      	b.n	80025da <HAL_TIM_PWM_Start+0x6a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e068      	b.n	80026b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_PWM_Start+0x82>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	e013      	b.n	800261a <HAL_TIM_PWM_Start+0xaa>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_PWM_Start+0x92>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	e00b      	b.n	800261a <HAL_TIM_PWM_Start+0xaa>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d104      	bne.n	8002612 <HAL_TIM_PWM_Start+0xa2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	e003      	b.n	800261a <HAL_TIM_PWM_Start+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	6839      	ldr	r1, [r7, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fa62 	bl	8003aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_TIM_PWM_Start+0x14c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d107      	bne.n	8002642 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_TIM_PWM_Start+0x14c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d018      	beq.n	800267e <HAL_TIM_PWM_Start+0x10e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d013      	beq.n	800267e <HAL_TIM_PWM_Start+0x10e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_TIM_PWM_Start+0x150>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00e      	beq.n	800267e <HAL_TIM_PWM_Start+0x10e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_TIM_PWM_Start+0x154>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_TIM_PWM_Start+0x10e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <HAL_TIM_PWM_Start+0x158>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_TIM_PWM_Start+0x10e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_TIM_PWM_Start+0x15c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d111      	bne.n	80026a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d010      	beq.n	80026b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a0:	e007      	b.n	80026b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40014000 	.word	0x40014000

080026d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f839 	bl	800276e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fe28 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_IC_Start_DMA+0x22>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e013      	b.n	80027ce <HAL_TIM_IC_Start_DMA+0x4a>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_IC_Start_DMA+0x32>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <HAL_TIM_IC_Start_DMA+0x4a>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_IC_Start_DMA+0x42>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e003      	b.n	80027ce <HAL_TIM_IC_Start_DMA+0x4a>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_TIM_IC_Start_DMA+0x5c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e013      	b.n	8002808 <HAL_TIM_IC_Start_DMA+0x84>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d104      	bne.n	80027f0 <HAL_TIM_IC_Start_DMA+0x6c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e00b      	b.n	8002808 <HAL_TIM_IC_Start_DMA+0x84>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d104      	bne.n	8002800 <HAL_TIM_IC_Start_DMA+0x7c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e003      	b.n	8002808 <HAL_TIM_IC_Start_DMA+0x84>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	b2db      	uxtb	r3, r3
 8002808:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800280a:	7dbb      	ldrb	r3, [r7, #22]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d002      	beq.n	8002816 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002810:	7d7b      	ldrb	r3, [r7, #21]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d101      	bne.n	800281a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	e13c      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800281a:	7dbb      	ldrb	r3, [r7, #22]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d143      	bne.n	80028a8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002820:	7d7b      	ldrb	r3, [r7, #21]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d140      	bne.n	80028a8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <HAL_TIM_IC_Start_DMA+0xb2>
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e12e      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_IC_Start_DMA+0xc2>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	e013      	b.n	800286e <HAL_TIM_IC_Start_DMA+0xea>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_IC_Start_DMA+0xd2>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	e00b      	b.n	800286e <HAL_TIM_IC_Start_DMA+0xea>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_IC_Start_DMA+0xe2>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	e003      	b.n	800286e <HAL_TIM_IC_Start_DMA+0xea>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <HAL_TIM_IC_Start_DMA+0xfa>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800287c:	e016      	b.n	80028ac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d104      	bne.n	800288e <HAL_TIM_IC_Start_DMA+0x10a>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800288c:	e00e      	b.n	80028ac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d104      	bne.n	800289e <HAL_TIM_IC_Start_DMA+0x11a>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800289c:	e006      	b.n	80028ac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80028a6:	e001      	b.n	80028ac <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0f3      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f919 	bl	8003aec <TIM_CCxChannelCmd>

  switch (Channel)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	f200 80ad 	bhi.w	8002a1c <HAL_TIM_IC_Start_DMA+0x298>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <HAL_TIM_IC_Start_DMA+0x144>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028fd 	.word	0x080028fd
 80028cc:	08002a1d 	.word	0x08002a1d
 80028d0:	08002a1d 	.word	0x08002a1d
 80028d4:	08002a1d 	.word	0x08002a1d
 80028d8:	08002945 	.word	0x08002945
 80028dc:	08002a1d 	.word	0x08002a1d
 80028e0:	08002a1d 	.word	0x08002a1d
 80028e4:	08002a1d 	.word	0x08002a1d
 80028e8:	0800298d 	.word	0x0800298d
 80028ec:	08002a1d 	.word	0x08002a1d
 80028f0:	08002a1d 	.word	0x08002a1d
 80028f4:	08002a1d 	.word	0x08002a1d
 80028f8:	080029d5 	.word	0x080029d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_TIM_IC_Start_DMA+0x318>)
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_TIM_IC_Start_DMA+0x31c>)
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	4a64      	ldr	r2, [pc, #400]	; (8002aa4 <HAL_TIM_IC_Start_DMA+0x320>)
 8002912:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3334      	adds	r3, #52	; 0x34
 800291e:	4619      	mov	r1, r3
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	f7fe fc28 	bl	8001178 <HAL_DMA_Start_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0b0      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	60da      	str	r2, [r3, #12]
      break;
 8002942:	e06e      	b.n	8002a22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_TIM_IC_Start_DMA+0x318>)
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_TIM_IC_Start_DMA+0x320>)
 800295a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3338      	adds	r3, #56	; 0x38
 8002966:	4619      	mov	r1, r3
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	f7fe fc04 	bl	8001178 <HAL_DMA_Start_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e08c      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002988:	60da      	str	r2, [r3, #12]
      break;
 800298a:	e04a      	b.n	8002a22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a42      	ldr	r2, [pc, #264]	; (8002a9c <HAL_TIM_IC_Start_DMA+0x318>)
 8002992:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <HAL_TIM_IC_Start_DMA+0x31c>)
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <HAL_TIM_IC_Start_DMA+0x320>)
 80029a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	333c      	adds	r3, #60	; 0x3c
 80029ae:	4619      	mov	r1, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	f7fe fbe0 	bl	8001178 <HAL_DMA_Start_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e068      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d0:	60da      	str	r2, [r3, #12]
      break;
 80029d2:	e026      	b.n	8002a22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_TIM_IC_Start_DMA+0x318>)
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <HAL_TIM_IC_Start_DMA+0x31c>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_TIM_IC_Start_DMA+0x320>)
 80029ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	4619      	mov	r1, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	f7fe fbbc 	bl	8001178 <HAL_DMA_Start_IT>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e044      	b.n	8002a94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a18:	60da      	str	r2, [r3, #12]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a20:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_TIM_IC_Start_DMA+0x324>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_TIM_IC_Start_DMA+0x2da>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d013      	beq.n	8002a5e <HAL_TIM_IC_Start_DMA+0x2da>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_TIM_IC_Start_DMA+0x328>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIM_IC_Start_DMA+0x2da>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_TIM_IC_Start_DMA+0x2da>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_TIM_IC_Start_DMA+0x330>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIM_IC_Start_DMA+0x2da>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_TIM_IC_Start_DMA+0x334>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d010      	beq.n	8002a92 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	e007      	b.n	8002a92 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	08003235 	.word	0x08003235
 8002aa0:	080032fd 	.word	0x080032fd
 8002aa4:	080031a3 	.word	0x080031a3
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0202 	mvn.w	r2, #2
 8002ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fb1d 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fb0f 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fb2a 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0204 	mvn.w	r2, #4
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 faf3 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fae5 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb00 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0208 	mvn.w	r2, #8
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2204      	movs	r2, #4
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fac9 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fabb 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fad6 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2208      	movs	r2, #8
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa9f 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa91 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 faac 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0201 	mvn.w	r2, #1
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa6b 	bl	8003116 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f001 f830 	bl	8003ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa71 	bl	800317a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0220 	mvn.w	r2, #32
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fffa 	bl	8003cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e088      	b.n	8002dfc <HAL_TIM_IC_ConfigChannel+0x130>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f000 fd38 	bl	800377c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020c 	bic.w	r2, r2, #12
 8002d1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	619a      	str	r2, [r3, #24]
 8002d2e:	e060      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d11c      	bne.n	8002d70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f000 fdb0 	bl	80038aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6999      	ldr	r1, [r3, #24]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	021a      	lsls	r2, r3, #8
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
 8002d6e:	e040      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11b      	bne.n	8002dae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f000 fdfd 	bl	8003984 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 020c 	bic.w	r2, r2, #12
 8002d98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]
 8002dac:	e021      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d11c      	bne.n	8002dee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f000 fe1a 	bl	80039fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002dd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69d9      	ldr	r1, [r3, #28]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]
 8002dec:	e001      	b.n	8002df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0ae      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	f200 809f 	bhi.w	8002f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e6d 	.word	0x08002e6d
 8002e3c:	08002f71 	.word	0x08002f71
 8002e40:	08002f71 	.word	0x08002f71
 8002e44:	08002f71 	.word	0x08002f71
 8002e48:	08002ead 	.word	0x08002ead
 8002e4c:	08002f71 	.word	0x08002f71
 8002e50:	08002f71 	.word	0x08002f71
 8002e54:	08002f71 	.word	0x08002f71
 8002e58:	08002eef 	.word	0x08002eef
 8002e5c:	08002f71 	.word	0x08002f71
 8002e60:	08002f71 	.word	0x08002f71
 8002e64:	08002f71 	.word	0x08002f71
 8002e68:	08002f2f 	.word	0x08002f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 faf6 	bl	8003464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6999      	ldr	r1, [r3, #24]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	619a      	str	r2, [r3, #24]
      break;
 8002eaa:	e064      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb3c 	bl	8003530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6999      	ldr	r1, [r3, #24]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
      break;
 8002eec:	e043      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fb87 	bl	8003608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0208 	orr.w	r2, r2, #8
 8002f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0204 	bic.w	r2, r2, #4
 8002f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	61da      	str	r2, [r3, #28]
      break;
 8002f2c:	e023      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fbd1 	bl	80036dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69d9      	ldr	r1, [r3, #28]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	61da      	str	r2, [r3, #28]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]
      break;
 8002f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0b4      	b.n	800310e <HAL_TIM_ConfigClockSource+0x186>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fdc:	d03e      	beq.n	800305c <HAL_TIM_ConfigClockSource+0xd4>
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	f200 8087 	bhi.w	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fea:	f000 8086 	beq.w	80030fa <HAL_TIM_ConfigClockSource+0x172>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d87f      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b70      	cmp	r3, #112	; 0x70
 8002ff6:	d01a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xa6>
 8002ff8:	2b70      	cmp	r3, #112	; 0x70
 8002ffa:	d87b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b60      	cmp	r3, #96	; 0x60
 8002ffe:	d050      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003000:	2b60      	cmp	r3, #96	; 0x60
 8003002:	d877      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b50      	cmp	r3, #80	; 0x50
 8003006:	d03c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xfa>
 8003008:	2b50      	cmp	r3, #80	; 0x50
 800300a:	d873      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d058      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d86f      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b30      	cmp	r3, #48	; 0x30
 8003016:	d064      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003018:	2b30      	cmp	r3, #48	; 0x30
 800301a:	d86b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d060      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d867      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05c      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003028:	2b10      	cmp	r3, #16
 800302a:	d05a      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	e062      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 fd35 	bl	8003aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
      break;
 800305a:	e04f      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f000 fd1e 	bl	8003aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800307e:	609a      	str	r2, [r3, #8]
      break;
 8003080:	e03c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f000 fbdc 	bl	800384c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2150      	movs	r1, #80	; 0x50
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fceb 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e02c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fc38 	bl	8003924 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2160      	movs	r1, #96	; 0x60
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fcdb 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e01c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f000 fbbc 	bl	800384c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fccb 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e00c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	4610      	mov	r0, r2
 80030ee:	f000 fcc2 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80030f2:	e003      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e000      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d107      	bne.n	80031ca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c8:	e02a      	b.n	8003220 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2202      	movs	r2, #2
 80031d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e2:	e01d      	b.n	8003220 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d107      	bne.n	80031fe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2204      	movs	r2, #4
 80031f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	e010      	b.n	8003220 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2208      	movs	r2, #8
 800320c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003216:	e003      	b.n	8003220 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff ffb4 	bl	800318e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d10f      	bne.n	800326c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d146      	bne.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326a:	e03d      	b.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d10f      	bne.n	8003296 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2202      	movs	r2, #2
 800327a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d131      	bne.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003294:	e028      	b.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d10f      	bne.n	80032c0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2204      	movs	r2, #4
 80032a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11c      	bne.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032be:	e013      	b.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d10e      	bne.n	80032e8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2208      	movs	r2, #8
 80032ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ff28 	bl	800313e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d103      	bne.n	800331c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	771a      	strb	r2, [r3, #28]
 800331a:	e019      	b.n	8003350 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	d103      	bne.n	800332e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2202      	movs	r2, #2
 800332a:	771a      	strb	r2, [r3, #28]
 800332c:	e010      	b.n	8003350 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	d103      	bne.n	8003340 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2204      	movs	r2, #4
 800333c:	771a      	strb	r2, [r3, #28]
 800333e:	e007      	b.n	8003350 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d102      	bne.n	8003350 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2208      	movs	r2, #8
 800334e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff fefe 	bl	8003152 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a31      	ldr	r2, [pc, #196]	; (800344c <TIM_Base_SetConfig+0xe8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a30      	ldr	r2, [pc, #192]	; (8003450 <TIM_Base_SetConfig+0xec>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <TIM_Base_SetConfig+0xf0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01b      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d017      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_Base_SetConfig+0xe8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_Base_SetConfig+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <TIM_Base_SetConfig+0xf0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <TIM_Base_SetConfig+0xf4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	; (800345c <TIM_Base_SetConfig+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_Base_SetConfig+0xfc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800

08003464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0302 	bic.w	r3, r3, #2
 80034ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <TIM_OC1_SetConfig+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10c      	bne.n	80034da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0308 	bic.w	r3, r3, #8
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <TIM_OC1_SetConfig+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d111      	bne.n	8003506 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40010000 	.word	0x40010000

08003530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0210 	bic.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0320 	bic.w	r3, r3, #32
 800357a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <TIM_OC2_SetConfig+0xd4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10d      	bne.n	80035ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <TIM_OC2_SetConfig+0xd4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d113      	bne.n	80035dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000

08003608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10d      	bne.n	8003682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800366c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d113      	bne.n	80036b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000

080036dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <TIM_OC4_SetConfig+0x9c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000

0800377c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a24      	ldr	r2, [pc, #144]	; (8003838 <TIM_TI1_SetConfig+0xbc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <TIM_TI1_SetConfig+0x56>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d00f      	beq.n	80037d2 <TIM_TI1_SetConfig+0x56>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <TIM_TI1_SetConfig+0xc0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_TI1_SetConfig+0x56>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <TIM_TI1_SetConfig+0xc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_TI1_SetConfig+0x56>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <TIM_TI1_SetConfig+0xc8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_TI1_SetConfig+0x56>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <TIM_TI1_SetConfig+0xcc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <TIM_TI1_SetConfig+0x5a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <TIM_TI1_SetConfig+0x5c>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e003      	b.n	80037f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	b2db      	uxtb	r3, r3
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f023 030a 	bic.w	r3, r3, #10
 8003810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 030a 	and.w	r3, r3, #10
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40014000 	.word	0x40014000

0800384c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0201 	bic.w	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 030a 	bic.w	r3, r3, #10
 8003888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 0210 	bic.w	r2, r3, #16
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f023 0210 	bic.w	r2, r3, #16
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003960:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0303 	bic.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	031b      	lsls	r3, r3, #12
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	031b      	lsls	r3, r3, #12
 8003a54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f043 0307 	orr.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2201      	movs	r2, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e050      	b.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d013      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10c      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40014000 	.word	0x40014000

08003c14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e03d      	b.n	8003cac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e03f      	b.n	8003d72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc ff42 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f829 	bl	8003d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d80:	b0c0      	sub	sp, #256	; 0x100
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	68d9      	ldr	r1, [r3, #12]
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd4:	f021 010c 	bic.w	r1, r1, #12
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003de2:	430b      	orrs	r3, r1
 8003de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	6999      	ldr	r1, [r3, #24]
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	ea40 0301 	orr.w	r3, r0, r1
 8003e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b8f      	ldr	r3, [pc, #572]	; (8004048 <UART_SetConfig+0x2cc>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <UART_SetConfig+0xa0>
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b8d      	ldr	r3, [pc, #564]	; (800404c <UART_SetConfig+0x2d0>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d104      	bne.n	8003e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fa90 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e24:	e003      	b.n	8003e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e26:	f7fe fa77 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	f040 810c 	bne.w	8004054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e56:	415b      	adcs	r3, r3
 8003e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e5e:	4621      	mov	r1, r4
 8003e60:	eb12 0801 	adds.w	r8, r2, r1
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb43 0901 	adc.w	r9, r3, r1
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	eb18 0303 	adds.w	r3, r8, r3
 8003e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	eb49 0303 	adc.w	r3, r9, r3
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	18db      	adds	r3, r3, r3
 8003eae:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	eb42 0303 	adc.w	r3, r2, r3
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ec0:	f7fc f98a 	bl	80001d8 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b61      	ldr	r3, [pc, #388]	; (8004050 <UART_SetConfig+0x2d4>)
 8003eca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011c      	lsls	r4, r3, #4
 8003ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	1891      	adds	r1, r2, r2
 8003eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eec:	415b      	adcs	r3, r3
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb43 0b01 	adc.w	fp, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f14:	4692      	mov	sl, r2
 8003f16:	469b      	mov	fp, r3
 8003f18:	4643      	mov	r3, r8
 8003f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f22:	464b      	mov	r3, r9
 8003f24:	eb4b 0303 	adc.w	r3, fp, r3
 8003f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f40:	460b      	mov	r3, r1
 8003f42:	18db      	adds	r3, r3, r3
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
 8003f46:	4613      	mov	r3, r2
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f56:	f7fc f93f 	bl	80001d8 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2301 	umull	r2, r3, r3, r1
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2264      	movs	r2, #100	; 0x64
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1acb      	subs	r3, r1, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <UART_SetConfig+0x2d4>)
 8003f78:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f84:	441c      	add	r4, r3
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6339      	str	r1, [r7, #48]	; 0x30
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fdc:	464b      	mov	r3, r9
 8003fde:	460a      	mov	r2, r1
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	18db      	adds	r3, r3, r3
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
 8004002:	4613      	mov	r3, r2
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800400e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004012:	f7fc f8e1 	bl	80001d8 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <UART_SetConfig+0x2d4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a08      	ldr	r2, [pc, #32]	; (8004050 <UART_SetConfig+0x2d4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 0207 	and.w	r2, r3, #7
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4422      	add	r2, r4
 8004042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004044:	e105      	b.n	8004252 <UART_SetConfig+0x4d6>
 8004046:	bf00      	nop
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800405e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004066:	4642      	mov	r2, r8
 8004068:	464b      	mov	r3, r9
 800406a:	1891      	adds	r1, r2, r2
 800406c:	6239      	str	r1, [r7, #32]
 800406e:	415b      	adcs	r3, r3
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
 8004072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004076:	4641      	mov	r1, r8
 8004078:	1854      	adds	r4, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb43 0501 	adc.w	r5, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	00eb      	lsls	r3, r5, #3
 800408a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408e:	00e2      	lsls	r2, r4, #3
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	4643      	mov	r3, r8
 8004096:	18e3      	adds	r3, r4, r3
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800409c:	464b      	mov	r3, r9
 800409e:	eb45 0303 	adc.w	r3, r5, r3
 80040a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040c2:	4629      	mov	r1, r5
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040cc:	4621      	mov	r1, r4
 80040ce:	008a      	lsls	r2, r1, #2
 80040d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040d4:	f7fc f880 	bl	80001d8 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4b60      	ldr	r3, [pc, #384]	; (8004260 <UART_SetConfig+0x4e4>)
 80040de:	fba3 2302 	umull	r2, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	011c      	lsls	r4, r3, #4
 80040e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	61b9      	str	r1, [r7, #24]
 8004100:	415b      	adcs	r3, r3
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004108:	4641      	mov	r1, r8
 800410a:	1851      	adds	r1, r2, r1
 800410c:	6139      	str	r1, [r7, #16]
 800410e:	4649      	mov	r1, r9
 8004110:	414b      	adcs	r3, r1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004120:	4659      	mov	r1, fp
 8004122:	00cb      	lsls	r3, r1, #3
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412a:	4651      	mov	r1, sl
 800412c:	00ca      	lsls	r2, r1, #3
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	4603      	mov	r3, r0
 8004134:	4642      	mov	r2, r8
 8004136:	189b      	adds	r3, r3, r2
 8004138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	67bb      	str	r3, [r7, #120]	; 0x78
 8004152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004160:	4649      	mov	r1, r9
 8004162:	008b      	lsls	r3, r1, #2
 8004164:	4641      	mov	r1, r8
 8004166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416a:	4641      	mov	r1, r8
 800416c:	008a      	lsls	r2, r1, #2
 800416e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004172:	f7fc f831 	bl	80001d8 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <UART_SetConfig+0x4e4>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a34      	ldr	r2, [pc, #208]	; (8004260 <UART_SetConfig+0x4e4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	441c      	add	r4, r3
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	673b      	str	r3, [r7, #112]	; 0x70
 80041a4:	677a      	str	r2, [r7, #116]	; 0x74
 80041a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041aa:	4642      	mov	r2, r8
 80041ac:	464b      	mov	r3, r9
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ba:	4641      	mov	r1, r8
 80041bc:	1851      	adds	r1, r2, r1
 80041be:	6039      	str	r1, [r7, #0]
 80041c0:	4649      	mov	r1, r9
 80041c2:	414b      	adcs	r3, r1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d2:	4659      	mov	r1, fp
 80041d4:	00cb      	lsls	r3, r1, #3
 80041d6:	4651      	mov	r1, sl
 80041d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041dc:	4651      	mov	r1, sl
 80041de:	00ca      	lsls	r2, r1, #3
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	4603      	mov	r3, r0
 80041e6:	4642      	mov	r2, r8
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ec:	464b      	mov	r3, r9
 80041ee:	460a      	mov	r2, r1
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004200:	667a      	str	r2, [r7, #100]	; 0x64
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800420e:	4649      	mov	r1, r9
 8004210:	008b      	lsls	r3, r1, #2
 8004212:	4641      	mov	r1, r8
 8004214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004218:	4641      	mov	r1, r8
 800421a:	008a      	lsls	r2, r1, #2
 800421c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004220:	f7fb ffda 	bl	80001d8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <UART_SetConfig+0x4e4>)
 800422a:	fba3 1302 	umull	r1, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2164      	movs	r1, #100	; 0x64
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	4a08      	ldr	r2, [pc, #32]	; (8004260 <UART_SetConfig+0x4e4>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4422      	add	r2, r4
 8004250:	609a      	str	r2, [r3, #8]
}
 8004252:	bf00      	nop
 8004254:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	51eb851f 	.word	0x51eb851f

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 f820 	bl	80042bc <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	080042fc 	.word	0x080042fc
 80042a0:	080042fc 	.word	0x080042fc
 80042a4:	080042fc 	.word	0x080042fc
 80042a8:	08004300 	.word	0x08004300

080042ac <memset>:
 80042ac:	4402      	add	r2, r0
 80042ae:	4603      	mov	r3, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
